#!/usr/bin/python3
#+
# HarfPy example: display the flags of the world that are included
# in such a font as Noto Color Emoji. The convention for encoding
# these is described at <https://en.wikipedia.org/wiki/Regional_indicator_symbol>.
#
# Copyright 2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import json
# import freetype2 as ft # use Qahirah instance
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Glyph, \
    Matrix, \
    Vector
ft = qah.get_ft_lib()
import harfbuzz as hb

def remap_region_char(c) :
    "remaps alphabetic characters to the special range of “region indicator symbols”."
    if "A" <= c <= "Z" :
        c = ord(c) - ord("A")
    elif "a" <= c <= "z" :
        c = ord(c) - ord("a")
    else :
        raise ValueError("not Roman alphabetic: %s" % repr(c))
    #end if
    return \
        chr(c + 0x1F1E6)
#end remap_region_char

emoji_font_spec = "Noto Color Emoji"
  # do any others have these symbols?
iso_3166_defs = "/usr/share/iso-codes/json/iso_3166-1.json"
  # comes from “iso-codes” package in Debian and derivatives
margin = Vector(10, 10)
dpi = qah.base_dpi

label_font_name = "sans-serif" # something acceptable to toy font face API only for now
title_size = 48
label_size = title_size * 0.5
emoji_size = 72

emoji_ft = ft.find_face(emoji_font_spec)
if emoji_ft.family_name != emoji_font_spec :
    raise RuntimeError("need %s font to display properly" % emoji_font_spec)
#end if
if len(emoji_ft.available_sizes) != 0 :
    sys.stderr.write \
      (
            "Bitmap font found, maximum size = %s\n"
        %
            max(s["size"] for s in emoji_ft.available_sizes)
      )
#end if
buf = hb.Buffer.create()
emoji_hb = hb.Font.ft_create(emoji_ft)

gx = qah.Context.create_for_dummy()
gx.select_font_face(label_font_name, CAIRO.FONT_SLANT_NORMAL, CAIRO.FONT_WEIGHT_NORMAL)
gx.set_font_size(title_size)
title_font = gx.scaled_font
max_title_ascender = title_font.font_extents.ascent
max_title_descender = title_font.font_extents.descent
gx.set_font_size(label_size)
label_font = gx.scaled_font
max_label_ascender = label_font.font_extents.ascent
max_label_descender = label_font.font_extents.descent
sys.stderr.write("title asc/desc = %.3f/%.3f, label asc/desc = %.3f/%.3f\n" % (max_title_ascender, max_title_descender, max_label_ascender, max_label_descender)) # debug
#gx.set_font_face(qah.FontFace.create_for_ft_face(emoji_ft))
gx.set_font_face(qah.FontFace.create_for_pattern(emoji_font_spec))
  # need to give Cairo its own copy of FT.Face to avoid interfering with
  # HarfBuzz’s glyph positioning--happens at non-default DPI settings
# derive symbol metrics entirely from Cairo rather than FreeType
gx.set_font_size(emoji_size)
emoji_qah = gx.scaled_font
symbol_height = emoji_qah.font_extents.height
symbol_width = 3 * emoji_size # good enough for these symbols
baseline_offset = emoji_qah.font_extents.ascent

iso_3166 = json.load(open(iso_3166_defs, "rt"))["3166-1"]
region_names = sorted(((r["alpha_2"], r["name"]) for r in iso_3166), key = lambda r : r[1])

nr_regions = len(region_names)
nr_cols = math.ceil(math.sqrt(nr_regions))
nr_rows = math.ceil(nr_regions / nr_cols)
cell_step = Vector(symbol_width, symbol_height + max_label_ascender + max_label_descender) + margin
figure_dims = \
    (
        Vector(0, margin.y + max_title_ascender + max_title_descender)
    +
        Vector(nr_cols, nr_rows) * cell_step
    +
        margin
    )
sys.stderr.write("figure dims = (%d, %d) * %s = %s\n" % (nr_cols, nr_rows, cell_step, figure_dims)) # debug
pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_RGB24,
    dimensions = round(figure_dims * dpi / qah.base_dpi)
  )
gx = \
    (qah.Context.create(pix)
        .scale(dpi / qah.base_dpi)
        .set_source_colour(Colour.grey(1, 1))
        .paint()
        .set_source_colour(Colour.grey(0, 1))
    )

title = "Region Codes & Flags From %s" % emoji_font_spec
gx.scaled_font = title_font
gx.move_to(((figure_dims.x - gx.text_extents(title).x_advance) / 2, margin.y + max_title_ascender))
sys.stderr.write("title at %s\n" % repr(gx.current_point)) # debug
gx.show_text(title)

col = row = 0
for code, name in region_names :
    symbol = "".join(remap_region_char(c) for c in code)
    label = "%s: %s" % (code, name)
    buf.reset()
    buf.add_str(symbol)
    buf.guess_segment_properties()
    hb.shape(emoji_hb, buf, [hb.Feature(tag = hb.HB.TAG(b"ccmp"), value = 1)])
    glyphs = buf.get_glyphs()[0]
    gx.save()
    gx.translate(Vector(col, row) * cell_step + Vector(0, max_title_ascender + max_title_descender) + margin * Vector(1, 2))
    gx.scaled_font = emoji_qah
    glyphs = tuple(qah.offset_glyphs
      (
        glyphs,
        Vector((symbol_width - gx.glyph_extents(glyphs).x_advance) / 2, baseline_offset)
      ))
    gx.show_glyphs(glyphs)
    gx.scaled_font = label_font
    label_width = gx.text_extents(label).x_advance
    if label_width > symbol_width :
        # squash to fit
        gx.font_matrix *= Matrix.scale(Vector(symbol_width / label_width, 1.0))
    #end if
    gx.move_to \
      ((
        (symbol_width - gx.text_extents(label).x_advance) / 2,
        symbol_height + max_label_ascender
      ))
    gx.show_text(label)
    gx.restore()
    col += 1
    if col == nr_cols :
        col = 0
        row += 1
    #end if
#end for

pix.flush()
pix.write_to_png("%s.png" % os.path.basename(sys.argv[0]))
