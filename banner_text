#!/usr/bin/python3
#+
# Draw large, nicely-kerned text. Invoke this script as follows:
#
#     banner_text [«options»] «text»...
#
# where each «text» argument is rendered on a separate line, with
# automatic centring vertically and horizontally.
#
# Valid «options» are as follows:
#
#    --dpi=«dpi»
#        the output resolution at which to render the page. Defaults to 72.
#    --feature=«feature», -f«feature»
#        specifies a font feature to enable/disable. This follows the usual
#        HarfBuzz syntax of the four-character feature code, optionally preceded
#        by a plus or minus sign, e.g. “kern” or “+kern” to enable kerning, “-kern”
#        to disable it. A list of standard feature names is available at
#        <https://www.microsoft.com/typography/otspec/featurelist.htm>, but the
#        actual ones supported (if any) depend on the font.
#    --font=«fontspec»
#        a Fontconfig pattern string specifying the font to use.
#    --noshaping
#        turn off HarfBuzz shaping. Useful for comparisons.
#    --out=«outfilename»
#        the output file name. If omitted, the output is displayed
#        on-screen instead of being saved to a file.
#    --page-size=«pagesize»
#        specifies the page size. This can be as 2 numbers in units of
#        points, separated by a colon «width»:«height», or as a standard
#        A-series size code (e.g. “A4”), or as the word “auto”, which means
#        it is computed to just fit the text, with a minimal margin.
#        If omitted, defaults to “auto”.
#        “auto” cannot be specified for both --page-size and --size.
#    --size=«textsize»
#        the text size to use. Can be specified as a number, or as
#        the word “auto”, which means the text is sized to fit the
#        page, with a minimal margin. Defaults to 144 points.
#        “auto” cannot be specified for both --page-size and --size.
#    --svg
#        render the output in vector SVG rather than PNG bitmap format.
#    --transparent
#        make the background transparent instead of white.
#
# External program needed: ImageMagick for on-screen display.
#
# Copyright 2019 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import subprocess
import getopt
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Glyph, \
    Vector
ft = qah.get_ft_lib()
import harfbuzz as hb

#+
# Useful stuff
#-

#points_per_metre = 2835 # used by PNG?
points_per_metre = 72 / .0254

def a_paper_size(num) :
    "returns the dimensions of the A«num» paper size, rounded to whole points," \
    " in landscape orientation."
    a1_dims = Vector(1, math.sqrt(0.5)) * points_per_metre # dimensions of A1 paper size
    return \
        round(a1_dims / 2 ** ((num - 0.5) / 2))
#end a_paper_size

#+
# Mainline
#-

opts, text = getopt.getopt \
  (
    sys.argv[1:],
    "f:",
    (
        "dpi=",
        "feature=",
        "font=",
        "noshaping",
        "out=",
        "page-size=",
        "size=",
        "svg",
        "transparent",
    )
  )
dpi = qah.base_dpi
page_size = "auto"
page_margin = Vector(10, 10)
text_size = 144
font_spec = "serif"
outfilename = None
hb_features = []
transparent = False
out_svg = False
use_hb = True
for keyword, value in opts :
    if keyword == "--dpi" :
        dpi = float(value)
        assert dpi > 0
    elif keyword == "-f" or keyword == "--feature" :
        hb_features.append(hb.Feature.from_string(value))
    elif keyword == "--font" :
        font_spec = value
    elif keyword == "--noshaping" :
        use_hb = False
    elif keyword == "--out" :
        outfilename = value
    elif keyword == "--page-size" :
        if value == "auto" :
            page_size = value
        elif value.startswith("a") or value.startswith("A") :
            page_size = a_paper_size(int(value[1:]))
        elif ":" in value :
            page_size = Vector(*tuple(float(x) for x in value.split(":", 1)))
        else :
            raise getopt.GetoptError \
              (
                "unrecognized value for --page-size: should be A«n»,"
                " «width»:«height» or “auto”"
              )
        #end if
    elif keyword == "--size" :
        if value == "auto" :
            text_size = "auto"
        else :
            text_size = float(value)
            assert text_size > 0
        #end if
    elif keyword == "--svg" :
        out_svg = True
    elif keyword == "--transparent" :
        transparent = True
    #end if
#end for
if len(text) == 0 :
    raise getopt.GetoptError("nothing to draw")
#end if
if text_size == "auto" and page_size == "auto" :
    raise getopt.GetoptError \
      (
        "--size and --page-size cannot both be auto -- need to determine one from the other"
      )
#end if
sys.stderr.write("paper size = %s\n" % repr(page_size)) # debug

ft_face = ft.find_face(font_spec)
sys.stderr.write("font = %s\n" % ft_face.family_name) # debug

measure_text_size = qah.base_dpi # anything reasonable, really
do_render = text_size != "auto" and page_size != "auto"
  # False if I need to do a measurement pass first
while True :
    use_text_size = (measure_text_size, text_size)[do_render]
    ft_face.set_char_size(size = use_text_size, resolution = qah.base_dpi)
    line_spacing = ft_face.size["metrics"]["height"]
    baseline_offset = \
        (
            (ft_face.size["metrics"]["ascender"] + ft_face.size["metrics"]["descender"])
        /
            2
        )

    if do_render :
        if outfilename == None :
            proc_display = subprocess.Popen \
              (
                args = ("display", "/dev/stdin"),
                stdin = subprocess.PIPE
              )
        else :
            proc_display = None
        #end if

        if out_svg :
            pix = qah.SVGSurface.create \
              (
                filename =
                    (
                        lambda : outfilename,
                        lambda : "/dev/fd/%d" % proc_display.stdin.fileno(),
                    )[outfilename == None](),
                dimensions_in_points = page_size
              )
            dpi = qah.base_dpi
        else :
            pix = qah.ImageSurface.create \
              (
                format = (CAIRO.FORMAT_RGB24, CAIRO.FORMAT_ARGB32)[transparent],
                dimensions = round(page_size * dpi / qah.base_dpi)
              )
        #end if
        ctx = \
            (qah.Context.create(pix)
                .scale(dpi / qah.base_dpi)
                .set_source_colour((Colour.grey(1), Colour.grey(0, 0))[transparent])
                .paint()
                .set_source_colour(Colour.grey(0))
            )
    else :
        ctx = qah.Context.create_for_dummy()
    #end if
    (ctx
        #.set_font_face(qah.FontFace.create_for_ft_face(ft_face))
        .set_font_face(qah.FontFace.create_for_pattern(font_spec))
          # need to give Cairo its own copy of FT.Face to avoid interfering with
          # HarfBuzz’s glyph positioning--happens at non-default DPI settings
        .set_font_size(use_text_size)
    )
    sys.stderr.write("ft ascender = %.3g, descender = %.3g\n" % (ft_face.size["metrics"]["ascender"], ft_face.size["metrics"]["descender"])) # debug
    sys.stderr.write("qah ascender = %.3g, descender = %.3g\n" % (ctx.font_extents.ascent, ctx.font_extents.descent)) # debug
    if use_hb :
        buf = hb.Buffer.create()
        hb_font = hb.Font.ft_create(ft_face)
        hb_face = hb.Face.ft_create(ft_face); sys.stderr.write("font has glyph classes? %s\n" % hb_face.ot_layout_has_glyph_classes) # debug
        if len(hb_features) == 0 :
            hb_features = tuple \
              (
                hb.Feature(tag = hb.HB.TAG(feature_tag), value = 1)
                for feature_tag in (b'kern', b'liga')
              )
        #end if
    #end if

    if do_render :
        baseline = (page_size.y - line_spacing * (len(text) - 1)) / 2 + baseline_offset
    else :
        baseline = baseline_offset
        page_bounds = qah.Rect(0, 0, 0, 0)
    #end if
    for line in text :
        if use_hb :
            buf.reset()
            buf.add_str(line)
            buf.guess_segment_properties()
            hb.shape(hb_font, buf, hb_features)
            glyphs = buf.get_glyphs()[0]
        else :
            glyphs = ctx.scaled_font.text_to_glyphs(Vector(0, 0), line)[0]
        #end if
        if do_render :
            glyphs = tuple(qah.offset_glyphs
              (
                glyphs,
                Vector((page_size.x - ctx.glyph_extents(glyphs).advance.x) / 2, baseline)
              ))
            if out_svg :
                ctx.new_path()
                ctx.glyph_path(glyphs)
                ctx.fill()
            else :
                ctx.show_glyphs(glyphs)
            #end if
        else :
            # Note that offset_glyphs does not affect returned TextExtents
            page_bounds |= ctx.glyph_extents(glyphs).bounds + Vector(0, baseline)
        #end if
        baseline += line_spacing
    #end for

    if do_render :
        break
    do_render = True

    # compute actual size to use
    if text_size == "auto" :
        text_size = \
            (
                measure_text_size
            *
                min(tuple((page_size - page_margin) / page_bounds.dimensions))
            )
    elif page_size == "auto" :
        page_size = page_bounds.dimensions * text_size / measure_text_size + page_margin
    #end if

    # and on to render pass
#end while

pix.flush()
if out_svg :
    ctx = pix = None # output not flushed until objects are disposed!
else :
    if outfilename != None :
        pix.write_to_png(outfilename)
    else :
        pix.write_to_png_file(proc_display.stdin)
    #end if
#end if
if proc_display != None :
    proc_display.stdin.close()
    proc_display.wait()
#end if
