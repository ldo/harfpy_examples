#!/usr/bin/python3
#+
# HarfPy example: vertical text layout. Uses the Noto Sans CJK JP
# font, which is part of the “fonts-noto-cjk” package under Debian.
#
# Copyright 2016 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
# import freetype2 as ft # use Qahirah instance
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Vector
ft = qah.get_ft_lib()
import harfbuzz as hb

# “Gong Xi Fa Cai” (Happy Chinese New Year)
# <http://goodcharacters.com/newsletters/gong-xi-fa-cai.html>
traditional = "\u606d\u79a7\u767c\u8ca1"
simplified = "\u606d\u79a7\u53d1\u8d22"

text_size = 48
buf = hb.Buffer.create()
ft_face = ft.find_face("Noto Sans CJK JP")
ft_face.set_char_size(size = text_size, resolution = qah.base_dpi)
hb_font = hb.Font.ft_create(ft_face)

glyph_lines = []
col_spacing = Vector(ft_face.size["metrics"]["height"], 0)
col_pos = Vector(0, 0) + col_spacing * Vector(-0.5, 1)
max_col_height = 0
for text_line in traditional, simplified :
    col_pos += col_spacing
    buf.reset()
    buf.add_str(text_line)
    buf.guess_segment_properties()
    buf.script = hb.HB.SCRIPT_HAN
    buf.direction = hb.HB.DIRECTION_TTB
    hb.shape(hb_font, buf)
    glyphs, end_glyph_pos = buf.get_glyphs(col_pos)
    #sys.stderr.write("line at %s ends at %s\n" % (col_pos, end_glyph_pos)) # debug
    max_col_height = max(max_col_height, end_glyph_pos.y)
    glyph_lines.append(glyphs)
#end for
qah_face = qah.FontFace.create_for_ft_face(ft_face)
margin = Vector(20, 20)
figure_dimensions = round(Vector(col_pos.x + col_spacing.x * 0.5, max_col_height) + 2 * margin)
pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_RGB24,
    dimensions = figure_dimensions
  )
ctx = \
    (qah.Context.create(pix)
        .translate(margin)
        .set_source_colour(Colour.x11["goldenrod"])
        .paint()
        .set_source_colour(Colour.x11["red3"])
        .set_font_face(qah_face)
        .set_font_size(text_size)
    )
for glyphs in glyph_lines :
    ctx.show_glyphs(glyphs)
#end for
pix.flush().write_to_png("%s.png" % os.path.basename(sys.argv[0]))
